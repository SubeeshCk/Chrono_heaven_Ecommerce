<%- include("../layouts/user/product-header")-%>

  <!-- breadcrumb -->
  <div class="container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
      <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
        Home
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>

      <a href="/cart" class="stext-109 cl8 hov-cl1 trans-04">
        Cart
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>
    </div>
  </div>

  <!-- Shoping Cart -->
  <form class="bg0 p-t-75 p-b-85" action="/update-cart" method="get">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 col-xl-7 m-lr-auto m-b-50">
          <div class="m-l-25 m-r--38 m-lr-0-xl">
            <div class="wrap-table-shopping-cart">
              <table class="table-shopping-cart">
                <tr class="table_head">
                  <th class="column-1">Product</th>
                  <th class="column-2"></th>
                  <th class="column-3">Price</th>
                  <th class="column-4">Quantity</th>
                  <th class="column-5">Total</th>
                  <th class="column-6">Remove</th>
                </tr>
                <% if (cartItems && cartItems.length> 0) { %>
                  <% cartItems.forEach(cartItem=> { %>
                    <tr class="table_row">
                      <% if (cartItem.product && cartItem.product[0] && cartItem.product[0].productId) { %>
                        <td class="column-1">
                          <div class="how-itemcart1">
                            <img
                              src="/adminAssets/uploads/product_images/<%= cartItem.product[0].productId.images[0] %>"
                              alt="IMG">
                          </div>
                        </td>
                        <td class="column-2">
                          <%= cartItem.product[0].productId.product_name %>
                        </td>
                        <td class="column-3">₹ <%= formatPriceWithCommas(cartItem.product[0].price) %>
                        </td>
                        <td class="column-4 cart__quantity">
                          <div class="quantity-wrapper">
                            <div class="quantity-btn minus-btn" data-product-id="<%= cartItem.product[0].productId %>"
                              style="padding: 5px 10px; font-weight: bold; cursor: pointer;">-</div>
                            <div class="quantity" style="padding: 5px 10px;">
                              <%= cartItem.product[0].quantity %>
                            </div>
                            <div class="quantity-btn plus-btn" data-product-id="<%= cartItem.product[0].productId %>"
                              style="padding: 5px 10px; font-weight: bold; cursor: pointer;">+</div>
                          </div>
                        </td>
                        <td class="column-5">₹ <%= formatPriceWithCommas(cartItem.product[0].totalPrice) %>
                        </td>
                        <td class="column-6 cart__close">
                          <a href="#" class="remove-btn" data-product-id="<%= cartItem.product[0].productId._id %>">
                            Remove
                          </a>
                        </td>
                        <% } else { %>
                          <td colspan="5">No product information available</td>
                          <% } %>
                    </tr>
                    <% }); %>
                      <% } else { %>
                        <tr>
                          <td colspan="5">No products in the cart <br> <a href="/products">Add products</a> </td>
                        </tr>
                        <% } %>
              </table>
            </div>

            <div class="flex-w flex-sb-m bor15 p-t-18 p-b-15 p-lr-40 p-lr-15-sm">
              <div class="flex-w flex-m m-r-20 m-tb-5">
                <input class="stext-104 cl2 plh4 size-117 bor13 p-lr-20 m-r-10 m-tb-5" type="text" name="coupon"
                  placeholder="Coupon Code">

                <button class="flex-c-m stext-101 cl2 size-118 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-5"
                  type="submit" formaction="/apply-coupon">
                  Apply coupon
                </button>
              </div>

              <button class="flex-c-m stext-101 cl2 size-119 bg8 bor13 hov-btn3 p-lr-15 trans-04 pointer m-tb-10"
                type="submit">
                Update Cart
              </button>
            </div>
          </div>
        </div>

        <div class="col-sm-10 col-lg-7 col-xl-5 m-lr-auto m-b-50">
          <div class="bor10 p-lr-40 p-t-30 p-b-40 m-l-63 m-r-40 m-lr-0-xl p-lr-15-sm">
            <h4 class="mtext-109 cl2 p-b-30">
              Cart Totals
            </h4>

            <div class="flex-w flex-t bor12 p-b-13">
              <div class="size-208">
                <span class="stext-110 cl2">
                  Subtotal:
                </span>
              </div>

              <div class="size-209">
                <span class="mtext-110 cl2">
                  ₹ <%= formatPriceWithCommas(cartItems.reduce((acc, item)=> acc + (item.product[0].totalPrice), 0)) %>
                </span>
              </div>
            </div>

            <div class="flex-w flex-t bor12 p-b-13">
              <div class="size-208">
                <span class="stext-110 cl2">
                  Discount:
                </span>
              </div>

              <div class="size-209">
                <span class="mtext-110 cl2">
                  ₹ <%= formatPriceWithCommas(cartItems.reduce((acc, item)=> acc + (item.product[0].offerDiscount), 0))
                    %>
                </span>
              </div>
            </div>

            <div class="flex-w flex-t p-t-27 p-b-33">
              <div class="size-208">
                <span class="mtext-101 cl2">
                  Total:
                </span>
              </div>

              <div class="size-209 p-t-1">
                <span class="mtext-110 cl2">
                  ₹ <%= formatPriceWithCommas(cartItems.reduce((acc, item)=> acc +
                    (item.product[0].totalPriceWithOffer),
                    0)) %>
                </span>
              </div>
            </div>
            <% function formatPriceWithCommas(price) { price=price.toString(); let
              lastThree=price.substring(price.length-3); let otherNumbers=price.substring(0, price.length-3); if
              (otherNumbers !='' ) lastThree=',' + lastThree; let
              formattedPrice=otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, "," ) + lastThree; return formattedPrice; }
              %>

              <button class="flex-c-m stext-101 cl0 size-116 bg3 bor14 hov-btn3 p-lr-15 trans-04 pointer" type="submit"
                formaction="/cart/checkout">
                Proceed to Checkout
              </button>
          </div>
        </div>
      </div>
    </div>
  </form>

  <%- include("../layouts/user/footer")-%>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        // Toastr configuration
        toastr.options = {
          "positionClass": "toast-bottom-center",
          "progressBar": true,
          "timeOut": "3000",
          "preventDuplicates": true,
          "onHidden": function () { toastr.clear(); }
        };

        const plusButtons = document.querySelectorAll('.plus-btn');
        const minusButtons = document.querySelectorAll('.minus-btn');
        const removeButtons = document.querySelectorAll('.remove-btn');

        plusButtons.forEach(button => {
          button.addEventListener('click', function () {
            const quantityElement = this.closest('.cart__quantity').querySelector('.quantity');
            let quantity = parseInt(quantityElement.textContent);
            if (quantity < 5) {
              const productId = this.dataset.productId;
              updateCart(productId, 1, quantityElement);
            } else {
              toastr.clear();
              toastr.warning('You cannot add more than 5 items.', 'Limit Reached');
            }
          });
        });

        minusButtons.forEach(button => {
          button.addEventListener('click', function () {
            const quantityElement = this.closest('.cart__quantity').querySelector('.quantity');
            let quantity = parseInt(quantityElement.textContent);
            if (quantity > 1) {
              const productId = this.dataset.productId;
              updateCart(productId, -1, quantityElement);
            }
          });
        });

        removeButtons.forEach(button => {
          button.addEventListener('click', function (e) {
            e.preventDefault();
            const productId = this.dataset.productId;
            Swal.fire({
              title: 'Are you sure want to delete this from cart?',
              text: 'This action cannot be undone!',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
              if (result.isConfirmed) {
                removeFromCart(productId);
              }
            });
          });
        });

        function updateCart(productId, quantityChange, quantityElement) {
          $.ajax({
            type: 'POST',
            url: '/updateCartItem',
            data: { productId: productId, quantityChange: quantityChange },
            success: function (response) {
              if (response.error) {
                toastr.clear();
                toastr.error(response.message, 'Error');
              } else {
                const newQuantity = parseInt(quantityElement.textContent) + quantityChange;
                quantityElement.textContent = newQuantity;

                const productRow = quantityElement.closest('tr');
                const priceElement = productRow.querySelector('.column-3');
                const totalElement = productRow.querySelector('.column-5');

                const unitPrice = parseFloat(priceElement.textContent.replace('₹ ', '').replace(',', ''));
                const newTotal = unitPrice * newQuantity;

                totalElement.textContent = '₹ ' + formatPriceWithCommas(newTotal);

                updateSubtotalAndTotal(response.cartItems);

                toastr.success('Cart updated successfully', 'Success');
              }
            },
            error: function (xhr, status, error) {
              console.error('Error updating cart quantity:', error);
              toastr.clear();
              if (xhr.responseJSON && xhr.responseJSON.message) {
                toastr.error(xhr.responseJSON.message, 'Error');
              } else {
                toastr.error('Failed to update cart', 'Error');
              }
            }
          });
        }

        function removeFromCart(productId) {
          $.ajax({
            type: 'POST',
            url: '/removeCartItem',
            data: { productId: productId },
            success: function (response) {
              if (response.success) {
                Swal.fire({
                  title: 'Success!',
                  text: 'Item removed from cart successfully.',
                  icon: 'success',
                  showConfirmButton: true
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.reload();
                  }
                });
              } else {
                Swal.fire({
                  title: 'Error!',
                  text: response.message || 'Failed to remove item from cart.',
                  icon: 'error'
                });
              }
            },
            error: function (xhr, status, error) {
              console.error('Error removing product from cart:', error);
              if (xhr.responseJSON && xhr.responseJSON.message) {
                Swal.fire({
                  title: 'Error!',
                  text: xhr.responseJSON.message,
                  icon: 'error'
                });
              } else {
                Swal.fire({
                  title: 'Error!',
                  text: 'Failed to remove item from cart.',
                  icon: 'error'
                });
              }
            }
          });
        }

        const checkoutButton = document.querySelector('button[formaction="/cart/checkout"]');
        if (checkoutButton) {
          checkoutButton.addEventListener('click', function (e) {
            e.preventDefault();
            $.ajax({
              type: 'GET',
              url: '/check-stock',
              success: function (response) {
                if (response.outOfStock) {
                  Swal.fire({
                    title: 'Out of Stock',
                    text: 'Some items in your cart are out of stock. Please remove them before proceeding to checkout.',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                  });
                } else {
                  window.location.href = '/cart/checkout';
                }
              },
              error: function (xhr, status, error) {
                console.error('Error checking stock:', error);
                if (xhr.responseJSON && xhr.responseJSON.message) {
                  Swal.fire({
                    title: 'Error',
                    text: xhr.responseJSON.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                  });
                } else {
                  Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while checking stock. Please try again.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                  });
                }
              }
            });
          });
        }
        function updateSubtotalAndTotal(cartItems) {
          let subtotal = 0;
          let discount = 0;
          let total = 0;

          cartItems.forEach(item => {
            subtotal += item.product[0].totalPrice;
            discount += item.product[0].offerDiscount;
            total += item.product[0].totalPriceWithOffer;
          });

          document.querySelector('.flex-w.flex-t.bor12.p-b-13 .size-209 .mtext-110.cl2').textContent = '₹ ' + formatPriceWithCommas(subtotal);
          document.querySelector('.flex-w.flex-t.bor12.p-b-13:nth-of-type(2) .size-209 .mtext-110.cl2').textContent = '₹ ' + formatPriceWithCommas(discount);
          document.querySelector('.flex-w.flex-t.p-t-27.p-b-33 .size-209.p-t-1 .mtext-110.cl2').textContent = '₹ ' + formatPriceWithCommas(total);
        }

        function formatPriceWithCommas(price) {
          // Convert to number if it's a string
          price = typeof price === 'string' ? parseFloat(price) : price;

          // Check if it's a valid number
          if (isNaN(price)) {
            console.error('Invalid price value:', price);
            return '0';
          }

          // Convert to string and split into whole and decimal parts
          let [whole, decimal] = price.toString().split('.');

          // Add commas to the whole part
          whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");

          // If there's a decimal part, keep it as is. If not, don't add .00
          return decimal ? `${whole}.${decimal}` : whole;
        }

      });
    </script>

    <style>
      #toast-container>.toast {
        background-color: black !important;
        color: white !important;
        width: 400px !important;
        min-height: 40px !important;
        font-size: 16px !important;
      }
    </style>