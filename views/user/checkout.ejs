<%- include('../layouts/user/product-header') %>

  <style>
    /* General page styles */
    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
    }

    .breadcrumb-option {
      margin-bottom: 20px;
      font-size: 14px;
    }

    /* Responsive grid system */
    .row {
      display: flex;
      flex-wrap: wrap;
      margin: 0 -15px;
    }

    .col-lg-8,
    .col-lg-4 {
      padding: 0 15px;
    }

    .col-lg-8 {
      flex: 0 0 66.66%;
      max-width: 66.66%;
    }

    .col-lg-4 {
      flex: 0 0 33.33%;
      max-width: 33.33%;
    }

    /* Form styles */
    form {
      width: 100%;
    }

    .checkout__form {
      background-color: #f9f9f9;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    /* Coupon section */

    .checkout__coupon__details {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 15px;
      background-color: #e9d491de;
    }

    .checkout__coupon label {
      font-size: x-large;
      margin-left: 20px;
    }

    .checkout__coupon button {
      padding: 10px 20px;
      margin-left: 10px;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }

    .site-btn1 {
      background-color: #d9534f;
      color: #fff;
      border-radius: 10px;
    }

    .site-btn1:hover {
      background-color: #c9302c;
    }

    /* Address selection */
    .checkout__address__details {
      display: inline-flexbox;
      justify-content: space-evenly;
      align-items: center;
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 15px;
      background-color: #f5f5f5;
      cursor: pointer;
    }

    /* Order summary */
    .checkout__order__product__list {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }

    .checkout__order__product__list th,
    .checkout__order__product__list td {
      padding: 10px;
      text-align: left;
      border-bottom: 1px solid #e0e0e0;
    }

    .checkout__order__product__list th:last-child,
    .checkout__order__product__list td:last-child {
      text-align: right;
    }

    .checkout__order__total ul {
      list-style-type: none;
      padding-left: 0;
      margin-bottom: 0;
    }

    .checkout__order__total ul li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #e0e0e0;
    }

    .checkout__order__total ul li:last-child {
      border-bottom: none;
      font-weight: bold;
    }

    .checkout__order__total .label {
      display: flex;
      align-items: center;
    }

    .checkout__order__total .icon {
      margin-right: 10px;
      font-size: 18px;
      width: 20px;
      text-align: center;
    }

    .checkout__order__total .price {
      text-align: right;
      min-width: 80px;
    }

    /* Additional styles for better layout */
    .checkout__order {
      background-color: #f9f9f9;
      border: 1px solid #e0e0e0;
      border-radius: 5px;
      padding: 20px;
    }

    .checkout__order h5 {
      margin-bottom: 15px;
      border-bottom: 2px solid #a69259;
      padding-bottom: 10px;
    }

    /* Payment section */
    .checkout__payment-method {
      margin-top: 20px;
    }

    .checkout__payment-method input {
      margin-right: 10px;
    }

    .site-btn1 {
      background-color: #28a745;
      color: white;
      border: none;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    /* Responsive design */
    @media (max-width: 768px) {

      .col-lg-8,
      .col-lg-4 {
        flex: 0 0 100%;
        max-width: 100%;
      }

      .checkout__coupon {
        flex-direction: column;
      }

      .checkout__coupon input {
        width: 100%;
        margin-bottom: 10px;
      }

      .checkout__coupon button {
        width: 100%;
        margin: 0;
      }
    }

    /* Custom colors and buttons */
    .site-btn {
      background-color: #a69259;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 4px 10px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .site-btn:hover {
      background-color: #0056b3;
    }

    /* Fixing the header issue */
    header {
      position: relative;
      z-index: 10;
    }

    /* Icon styles */
    .icon {
      margin-right: 10px;
      font-size: 18px;
    }
  </style>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.all.min.js"></script>

  <!-- Breadcrumb Begin -->
  <div class="container">
    <div class="bread-crumb flex-w p-b-15 p-r-15 p-t-30 p-lr-0-lg">
      <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
        Home
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>

      <a href="/cart" class="stext-109 cl8 hov-cl1 trans-04">
        Cart
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>

      <a href="/cart/checkOut" class="stext-109 cl8 hov-cl1 trans-04">
        Check out
        <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
      </a>
    </div>
  </div>
  <!-- Breadcrumb End -->

  <!-- Checkout Form -->
  <section class="checkout spad">
    <div class="container p-b-60">
      <form action="/placeOrder" method="POST" class="checkout__form" id="checkoutForm">
        <div class="row">
          <!-- Left column: Address and Coupon -->
          <div class="col-lg-4">
            <h5><i class="fa fa-map-marker icon"></i>Address</h5>
            <br>
            <div class="checkout__address">
              <% if (addressData.length> 0) { %>
                <% addressData.forEach((address, index)=> { %>
                  <div class="checkout__address__details" id="address<%= address._id %>">
                    <input type="radio" name="selectedAddress" value="<%= address._id %>"
                      id="address<%= address._id %>">
                    <label for="address<%= address._id %>">
                      <%= address.name %> <br>
                        <%= address.address %> <br>
                          <%= address.city %> <br>
                            <%= address.pincode %> <br>
                              <%= address.state %> <br>
                                <%= userData.mobile %>
                    </label>
                    <button type="button" class="btn btn-danger btn-sm"
                      onclick="removeAddress('<%= address._id %>')">Remove</button>
                  </div>
                  <% }); %>
                    <% } else { %>
                      <p>No address available. Please add one.</p>
                      <% } %>
                        <button type="button" class="site-btn" onclick="navigateToAddAddress()">Add Address</button>
            </div>
            <br>
            <div class="checkout__coupon">
              <h5><i class="fa fa-tag icon"></i>Available coupon</h5>
              <br>
              <% availableCoupons.forEach(coupon=> { %>
                <div class="checkout__coupon__details">
                  <div style="display: flex; align-items: start;">
                    <input type="radio" name="couponCode" value="<%= coupon.code %>" id="couponCode">

                  </div>
                  <label for="couponCode<%= coupon.code %>">
                    <%= coupon.code %>
                  </label>
                </div>
                <%})%>
                  <button type="button" class="btn btn-primary btn-sm" onclick="applyCoupon()">Apply</button>
            </div>

          </div>

          <!-- Right column: Order Summary -->
          <div class="col-lg-8">
            <% if (messages.success) { %>
              <div class="alert alert-success flash-message" role="alert" style="color: green;" data-timeout="5">
                <%= messages.success %>
              </div>
              <% } %>

                <% if (messages.error) { %>
                  <div class="alert alert-danger flash-message" role="alert" style="color: red;" data-timeout="5">
                    <%= messages.error %>
                  </div>
                  <% } %>
                    <div class="checkout__order">
                      <h5><i class="fa fa-shopping-cart icon"></i>Your Order</h5>
                      <table class="checkout__order__product__list">
                        <thead>
                          <tr>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Price</th>
                          </tr>
                        </thead>
                        <tbody>
                          <% cartItems.forEach(cartItem=> { %>
                            <tr>
                              <td>
                                <%= cartItem.product[0].productId.product_name %>
                              </td>
                              <td>
                                <%= cartItem.product[0].quantity %>
                              </td>
                              <td>â‚¹ <%= (cartItem.product[0].price *
                                  cartItem.product[0].quantity).toLocaleString('en-IN', { maximumFractionDigits: 2 }) %>
                              </td>
                            </tr>
                            <% }); %>
                        </tbody>
                      </table>

                      <!-- Hidden Inputs for Order Summary -->
                      <input type="hidden" name="subtotal" value="<%= subtotal %>">
                      <input type="hidden" name="discount"
                        value="<%= cartItems.reduce((acc, item)=> acc + (item.product[0].offerDiscount), 0) %>">
                      <input type="hidden" name="deliveryCharge" value="<%= deliveryCharge %>">
                      <input type="hidden" name="totalAmount" value="<%= total %>">

                      <div class="checkout__order__total">
                        <ul>
                          <li>
                            <span class="label"><i class="fa fa-money icon"></i>Subtotal</span>
                            <span class="price">â‚¹ <%= subtotal.toLocaleString('en-IN', { maximumFractionDigits: 2 }) %>
                            </span>
                          </li>
                          <li>
                            <span class="label"><i class="fa fa-tag icon"></i>Discount</span>
                            <span class="price" id="discount">â‚¹ <%= (cartItems.reduce((acc, item)=> acc +
                                (item.product[0].offerDiscount), 0)).toLocaleString('en-IN', { maximumFractionDigits: 2
                                }) %></span>
                          </li>
                          <li>
                            <span class="label"><i class="fa fa-truck icon"></i>Delivery charge</span>
                            <span class="price" id="deliveryCharge">
                              <% if (deliveryCharge===0) { %>
                                <span style="color: green;">Free Delivery</span>
                                <% } else { %>
                                  â‚¹ <%= deliveryCharge.toLocaleString('en-IN', { maximumFractionDigits: 2 }) %>
                                    <% } %>
                            </span>
                          </li>
                          <li>
                            <span class="label"><i class="fa fa-tag icon"></i>Coupon Discount</span>
                            <span class="price" style="display: flex; align-items: center; gap: 10px;">
                              <span id="couponDiscount">No coupon applied</span>
                              <button type="button" id="removeCouponBtn" onclick="removeCoupon()"
                                class="btn btn-danger btn-sm" style="display: none;">
                                <i class="fa fa-times"></i>
                              </button>
                            </span>
                          </li>
                          <li>
                            <span class="label"><i class="fa fa-calculator icon"></i>Total</span>
                            <span class="price" id="totalAmount">â‚¹ <%= total.toLocaleString('en-IN', {
                                maximumFractionDigits: 2 }) %></span>
                          </li>
                        </ul>
                      </div>
                    </div>

                    <!-- Payment Method -->
                    <div class="checkout__payment-method">
                      <h5><i class="fa fa-credit-card icon"></i>Payment Method</h5>
                      <br>
                <!-- Cash on Delivery -->
                <input type="radio" id="cashOnDelivery" name="paymentMethod" value="cashOnDelivery">
                <label for="cashOnDelivery" id="codLabel">
                  <img width="34" height="34" src="https://img.icons8.com/external-flaticons-lineal-color-flat-icons/64/external-cash-on-delivery-web-store-flaticons-lineal-color-flat-icons.png" alt="external-cash-on-delivery-web-store-flaticons-lineal-color-flat-icons"/>
                  COD
                </label>
                <br>

                <!-- Wallet -->
                <input type="radio" id="wallet" name="paymentMethod" value="wallet">
                <label for="wallet">
                  <img width="34" height="34" src="https://img.icons8.com/3d-fluency/94/card-wallet.png" alt="card-wallet"/>
                  Wallet
                </label>
                <br>
                
                <!-- Razorpay -->
                <input type="radio" id="razorpay" name="paymentMethod" value="razorpay">
                <label for="razorpay">
                  <a href="https://razorpay.com/" target="_blank"> <img referrerpolicy="origin" src = "https://badges.razorpay.com/badge-light.png " style = "height: 45px; width: 113px;" alt = "Razorpay | Payment Gateway | Neobank"></a>
                </label>
              </div>
                <br>

                    <button type="submit" class="site-btn1">Place Order</button>
          </div>
        </div>
      </form>
    </div>
  </section>

  <%- include('../layouts/user/footer') %>

    <!-- JS Script for Coupon and Address Handling -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>

// Add this at the beginning of your script section
let currentlyAppliedCoupon = null;

function applyCoupon() {
    const couponCode = document.querySelector('input[name="couponCode"]:checked')?.value;
    const deliveryCharge = parseFloat(document.querySelector('input[name="deliveryCharge"]').value) || 0;
    const subtotal = parseFloat(document.querySelector('input[name="subtotal"]').value) || 0;
    const existingDiscount = parseFloat(document.querySelector('input[name="discount"]').value) || 0;

    if (!couponCode) {
        Swal.fire('Error', 'Please select a coupon', 'error');
        return;
    }

    fetch('/applyCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            couponCode: couponCode,
            deliveryCharge: deliveryCharge,
            subtotal: subtotal
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Store the currently applied coupon
            currentlyAppliedCoupon = couponCode;

            // Update displayed values
            document.getElementById('totalAmount').innerText = `â‚¹ ${data.newTotal.toLocaleString('en-IN', { maximumFractionDigits: 2 })}`;
            document.getElementById('couponDiscount').innerText = `â‚¹ ${data.couponDiscount.toLocaleString('en-IN', { maximumFractionDigits: 2 })}`;

            // Show the remove button
            document.getElementById('removeCouponBtn').style.display = 'inline-block';

            // Update hidden input fields
            document.querySelector('input[name="totalAmount"]').value = data.newTotal;

            // Add or update hidden input for coupon discount
            let couponDiscountInput = document.querySelector('input[name="couponDiscount"]');
            if (!couponDiscountInput) {
                couponDiscountInput = document.createElement('input');
                couponDiscountInput.type = 'hidden';
                couponDiscountInput.name = 'couponDiscount';
                document.getElementById('checkoutForm').appendChild(couponDiscountInput);
            }
            couponDiscountInput.value = data.couponDiscount;

            // Add or update hidden input for applied coupon
            let appliedCouponInput = document.querySelector('input[name="appliedCoupon"]');
            if (!appliedCouponInput) {
                appliedCouponInput = document.createElement('input');
                appliedCouponInput.type = 'hidden';
                appliedCouponInput.name = 'appliedCoupon';
                document.getElementById('checkoutForm').appendChild(appliedCouponInput);
            }
            appliedCouponInput.value = couponCode;

            // Disable other coupon radio buttons
            document.querySelectorAll('input[name="couponCode"]').forEach(input => {
                if (input.value !== couponCode) {
                    input.disabled = true;
                }
            });

            Swal.fire('Success', 'Coupon applied successfully', 'success');
        } else {
            Swal.fire('Error', data.message || 'Error applying coupon', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    });
}

function removeCoupon() {
    if (!currentlyAppliedCoupon) {
        Swal.fire('Error', 'No coupon is currently applied', 'error');
        return;
    }

    const deliveryCharge = parseFloat(document.querySelector('input[name="deliveryCharge"]').value) || 0;
    const subtotal = parseFloat(document.querySelector('input[name="subtotal"]').value) || 0;
    const existingDiscount = parseFloat(document.querySelector('input[name="discount"]').value) || 0;

    fetch('/removeCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            couponCode: currentlyAppliedCoupon,
            deliveryCharge: deliveryCharge,
            subtotal: subtotal
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Reset the currently applied coupon
            currentlyAppliedCoupon = null;

            // Calculate total without coupon
            const totalWithoutCoupon = subtotal - existingDiscount + deliveryCharge;

            // Reset displayed values
            document.getElementById('couponDiscount').innerText = 'No coupon applied';
            document.getElementById('totalAmount').innerText = `â‚¹ ${totalWithoutCoupon.toLocaleString('en-IN', { maximumFractionDigits: 2 })}`;

            // Hide the remove button
            document.getElementById('removeCouponBtn').style.display = 'none';

            // Update hidden input
            document.querySelector('input[name="totalAmount"]').value = totalWithoutCoupon;

            // Remove coupon-related hidden inputs
            const couponDiscountInput = document.querySelector('input[name="couponDiscount"]');
            if (couponDiscountInput) couponDiscountInput.remove();

            const appliedCouponInput = document.querySelector('input[name="appliedCoupon"]');
            if (appliedCouponInput) appliedCouponInput.remove();

            // Enable all coupon radio buttons and uncheck them
            document.querySelectorAll('input[name="couponCode"]').forEach(input => {
                input.disabled = false;
                input.checked = false;
            });

            Swal.fire('Success', 'Coupon removed successfully', 'success');
        } else {
            Swal.fire('Error', data.message || 'Error removing coupon', 'error');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred. Please try again.', 'error');
    });
}

      // Modify the form submission to include all necessary data
      document.getElementById('checkoutForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    // Validate required fields
    const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
        Swal.fire('Error', 'Please select a delivery address', 'error');
        return;
    }

    if (!paymentMethod) {
        Swal.fire('Error', 'Please select a payment method', 'error');
        return;
    }

    // Get all the required values
    const formData = new FormData(this);
    const formDataObject = {
        selectedAddress: formData.get('selectedAddress'),
        paymentMethod: formData.get('paymentMethod'),
        deliveryCharge: parseFloat(formData.get('deliveryCharge')),
        subtotal: parseFloat(formData.get('subtotal')),
        discount: parseFloat(formData.get('discount')) || 0,
        couponDiscount: parseFloat(formData.get('couponDiscount')) || 0,
        totalAmount: parseFloat(formData.get('totalAmount'))
    };

    try {
        if (formDataObject.paymentMethod === 'razorpay') {
            // Handle Razorpay payment
            const response = await fetch('/placeOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formDataObject)
            });

            const data = await response.json();
            
            if (data.success) {
                const options = {
                    key: data.key_id, // Use the key from the server response
                    amount: data.amount,
                    currency: data.currency,
                    name: "CHRONO HEAVEN",
                    description: "Watch Purchase",
                    order_id: data.razorpayOrderId,
                    handler: function(response) {
                        verifyPayment(response, data.orderId);
                    },
                    prefill: {
                        name: document.querySelector('input[name="name"]')?.value || '',
                        email: document.querySelector('input[name="email"]')?.value || '',
                        contact: document.querySelector('input[name="mobile"]')?.value || ''
                    },
                    theme: {
                        color: "#3399cc"
                    },
                    modal: {
                        ondismiss: function() {
                            Swal.fire('Payment Cancelled', 'The payment was cancelled by the user', 'info');
                        }
                    }
                };

                const rzp1 = new Razorpay(options);
                rzp1.open();
                
            } else {
                Swal.fire('Error', data.message || 'Failed to create order', 'error');
            }
        } else {
            // Handle other payment methods (COD, wallet)
            const response = await fetch('/placeOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formDataObject)
            });

            const data = await response.json();
            
            if (data.success) {
                Swal.fire('Success', 'Order placed successfully', 'success')
                    .then(() => {
                        window.location.href = '/orderplaced';
                    });
            } else {
                Swal.fire('Error', data.message || 'Failed to place order', 'error');
            }
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire('Error', 'An error occurred while processing your order', 'error');
    }
});


    async function handleRazorpayPayment(selectedAddress, deliveryCharge, subtotal, discount, couponDiscount, total) {
    try {
        const response = await fetch('/placeOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                selectedAddress: selectedAddress,
                paymentMethod: 'razorpay',
                deliveryCharge: deliveryCharge,
                subtotal: subtotal,
                discount: discount,
                couponDiscount: couponDiscount,
                total: total
            })
        });

        const data = await response.json();

        if (response.ok && data.success) {
            const options = {
                key: "<%= RAZOPAY_ID_KEY %>",
                amount: data.amount,
                currency: data.currency,
                name: "CHRONO HEAVEN",
                description: "Test Transaction",
                order_id: data.razorpayOrderId,
                handler: function (response) {
                    verifyPayment(response, data.orderId);
                },
                prefill: {
                    name: "<%= userData.name %>",
                    email: "<%= userData.email %>",
                    contact: "<%= userData.mobile %>"
                },
                theme: {
                    color: "#3399cc"
                },
                modal: {
                    ondismiss: function() {
                        setTimeout(() => {
                            showPaymentFailedAlert();
                        }, 300);
                    }
                }
            };
            const rzp1 = new Razorpay(options);
            rzp1.open();
        } else {
            showPaymentFailedAlert();
        }
    } catch (error) {
        console.error('Error:', error);
        showPaymentFailedAlert();
    }
}


function showPaymentFailedAlert() {
    Swal.fire({
        title: 'Payment Failed',
        text: 'The payment process was unsuccessful. Please try again.',
        icon: 'error',
        confirmButtonText: 'OK',
        timer: 5000, 
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });
}

async function verifyPayment(response, orderId) {
    try {
        const verifyResponse = await fetch('/verifyRazorpayPayment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                razorpay_order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature,
                orderId: orderId
            })
        });

        const verifyData = await verifyResponse.json();
        if (verifyData.success) {
            window.location.replace(`/orderplaced`);
        } else {
            showPaymentFailedAlert();
        }
    } catch (error) {
        console.error('Error:', error);
        showPaymentFailedAlert();
    }
}

    </script>